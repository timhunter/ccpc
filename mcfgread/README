Compiling (make all) will create an executable called mcfgread.  For now,
the mcfgread executable parses an mcfg file and does nothing with it (i.e. it
serves as a recognizer for mcfg files).  You need to modify the contents of
main.ml to do something with the mcfg after reading the file.

parser can be run as follows:
./mcfgread < test.mcfg

The input file must be an mcfg file in the same format as the output 
of the epsilon deemptying program.  This happens to be backwards-compatible
with the output of the Guillaumin MG to MCFG translator.  The only change to
the file format is that the string Epsilon can replace an int tuple.

For example, the following two rules are valid:
t3 --> E t1 [0,0;1,0]
t4 --> E t1 [Epsilon;1,0]

One minor quirk is that the file cannot have empty newlines at the end of the
file.

If you'd like to play with this at the OCaml toplevel, run the following
after compiling:
# #load "parse.cmo";;
# #load "grammar.cmo";;
# #load "lexer.cmo";;
# let lexbuf = Lexing.from_channel (open_in "../test.mcfg");;
# Parse.mcfgrule Lexer.token lexbuf;;
